---
- name: create vm directory
  file:
    path: "{{ vmdata_dir }}/{{ item }}/cloud-init"
    state: directory
    recurse: yes
  with_items: "{{ groups['vms'] }}"

- name: copy vm os image
  copy:
    src: "{{ download_path }}/{{ download_url[hostvars[item]['src_vm_image_type']] | basename }}"
    dest: "{{ vmdata_dir }}/{{ item }}/os.qcow2"
    force: yes
  with_items: "{{ groups['vms'] }}"

- name: vm os image resizing
  command: >
    qemu-img
    resize 
    {{ vmdata_dir }}/{{ item }}/os.qcow2
    {{ hostvars[item]['image_size'] }}
  with_items: "{{ groups['vms'] }}"

- name: extra disk create | create list
  set_fact:
    extra_disk_host: "{{ extra_disk_host | default([]) + ( [ {'hostname': item} ] * hostvars[item]['extra_disk'] | length ) }}"
    extra_disk_size: "{{ extra_disk_size | default([]) + hostvars[item]['extra_disk'] }}"
  with_items: "{{ groups['vms'] }}"
  when: hostvars[item]['extra_disk'] | length > 0

- name: extra disk create | merge list
  set_fact:
    extra_disk_list: "{{ extra_disk_list | default([]) + [ item[0] | combine(item[1]) ] }}"
  loop: "{{ extra_disk_host | zip(extra_disk_size) | list }}"
  when: extra_disk_host is defined and extra_disk_host | length > 0

- name: extra disk create
  command: >
    qemu-img
    create
    -f qcow2
    {{ vmdata_dir }}/{{ item.hostname }}/disk-{{ disk_idx }}.qcow2
    {{ item.size }}
  with_items: "{{ extra_disk_list }}"
  when: extra_disk_list is defined and extra_disk_list | length > 0
  loop_control:
    index_var: disk_idx

- name: extra disk argument string create
  vars:
    host_extra_disk_args: {}
  set_fact:
    host_extra_disk_args: "{{ host_extra_disk_args | combine({ item.hostname: host_extra_disk_args[item.hostname] | default('') + ' --disk ' + vmdata_dir + '/' + item.hostname + '/disk-' + disk_idx | string + '.qcow2,device=disk,bus=virtio,format=qcow2' }) }}"
  with_items: "{{ extra_disk_list }}"
  when: extra_disk_list is defined and extra_disk_list | length > 0
  loop_control:
    index_var: disk_idx

- name: create meta-data
  template:
    src: template/meta-data.j2
    dest: "{{ vmdata_dir }}/{{ item }}/cloud-init/meta-data"
  with_items: "{{ groups['vms'] }}"

- name: create user-data
  template:
    src: template/user-data.j2
    dest: "{{ vmdata_dir }}/{{ item }}/cloud-init/user-data"
  with_items: "{{ groups['vms'] }}"

- name: create network-config
  template:
    src: template/network-config.j2
    dest: "{{ vmdata_dir }}/{{ item }}/cloud-init/network-config"
  with_items: "{{ groups['vms'] }}"

- name: Create cidata iso image
  command: >
    genisoimage
    -output {{ vmdata_dir }}/{{ item }}/cloud-init/cidata.iso
    -volid cidata -J -r
    {{ vmdata_dir }}/{{ item }}/cloud-init/user-data
    {{ vmdata_dir }}/{{ item }}/cloud-init/meta-data
    {{ vmdata_dir }}/{{ item }}/cloud-init/network-config
  with_items: "{{ groups['vms'] }}"

- name: libvirt vm install
  command: >
    virt-install
    --name {{ item }}
    --virt-type kvm
    --os-variant {{ hostvars[item]['os-variant'] }}
    --cpu {{ hostvars[item]['cpu_model'] | default('host-passthrough') }}
    --vcpus {{ hostvars[item]['vcpu'] }}
    --memory {{ hostvars[item]['memory'] }}
    --graphics spice
    --noautoconsole
    --autostart
    --import
    --disk path={{ vmdata_dir }}/{{ item }}/cloud-init/cidata.iso,device=cdrom
    --disk path={{ vmdata_dir }}/{{ item }}/os.qcow2,device=disk,bus=virtio,format=qcow2 {{ host_extra_disk_args[item] | default("") }}
    --network network={{ hostvars[item]['default_libvirt_network'] }},model=virtio {{ hostvars[item]['extra_network_args'] }}
  with_items: "{{ groups['vms'] }}"


